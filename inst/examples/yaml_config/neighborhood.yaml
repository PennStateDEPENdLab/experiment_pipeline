################################
task: neighborhood
################################
variable_mapping: #column names in $behav dataset for subject, mapped to standard constructs in experiment validation
  id: id
  run:
  run_trial:
  run_condition:
  block: block
  block_trial: block_trial
  block_condition:
  trial: trial
  trial_condition: condition
  event: event
################################
# id: paste(participant, participant.initials, sep="_")
runs: #nothing
definitions:
  behav: &behav #shared key mapping for behavior across blocks
    response: key_pressed
    valid: [space, None]
    rt: rt
    start_time: #key_resp_10.started
    end_time: #key_resp_10.stopped
  eye: &eye
    expected_edf_fields: ["raw", "sacc", "fix", "blinks", "msg", "input", "button", "info", "asc_file", "edf_file"]
    meta_check:
      meta_vars: ['sample.rate', 'model', 'mono', 'pupil.dtype', 'screen.x', 'screen.y', 'version']
      meta_vals: ['1000', 'EyeLink 1000', 'TRUE', 'AREA', '1920', '1080', '4.594']
      recording_time: [1200, 360] # [expected time (seconds), margin of error above and below]
    inherit_btw_tr: # do certain between-trial messages need to be extracted for any reason? If left out, will skip
      calibration_check:
        cal: ['!CAL CALIBRATION HV9']
        val: ['!CAL VALIDATION HV9']
    event_info:
      extraction_method: 'csv' # can be 'csv', 'regex', or 'data.frame'
      csv_path: '/Users/lab/github_repos/experiment.pipeline/inst/examples/neighborhood/eye_msg_csvs'
      msg_seq: # &msg_seq #decided to comment this out below for the sake of simplicity.
        msg_start: ["!MODE RECORD CR 1000 2 1 R", "TRIALID", "SYNCTIME", "DISPLAY ON"]
        msg_end: [ "TRIAL_RESULT ", "TRIAL "]
        eval_middle: TRUE #smoosh certain event-specific (taken from below) messages in between the task-general beginning and end messages.
        ordered: FALSE
    gaze:
      aoi:
        indicator: ["!V IAREA RECTANGLE"]
        extraction_method: regex
        extract_coords: ["\\d{3,4} \\d{3,4} \\d{3,4} \\d{3,4}"]
        extract_labs: ["[a-z]+$"]
        split_coords: " "
        tag_raw: FALSE #unless there is some strong reason to need super-high resolution on AOI position (moving AOIs, which are not currently supported), this should be FALSE. Default is FALSE if not included in config.
      downsample:
        factor: 20
        method: "mean"
      interpolate:
        algor: "linear"
        maxgap: 1000 ### in ms, will use the original sampling frequency and downsampling factor to convert to nmeasurements.
    pupil:
      downsample:
        factor: 50
        method: "mean"
      interpolate:
        algor: "spline"
        maxgap: 1000 ### in ms, will use the original sampling frequency and downsampling factor to convert to nmeasurements.
      blink_corr:
        ms_before: 100
        ms_after: 100
      filter:
        method: "movingavg" #right now only moving average supported
        window_length: 50 #n measurements to lookback while smoothing, gets passed to pracma::movavg. In ms.
        # type: "w" #options for the type of moving avrage to calculate. I like the linear weighted option ("w"). Update: hard code to "s" or simple,
      baseline_correction:
        method: "subtract"
        dur_ms: 100
        center_on: "SYNCTIMEiterm"
    return_raw: TRUE # If false, will remove the raw data from the ep object.
     # coincident_msg: 11/1/20: deprecated, but can revive if there is interest. blocked #placeholder for now for messages that occur at the exact same timestamp in the .edf file. blocked will essentially expand the number of rows in the raw df by creating multiple rows with the same ET measurements but different messages. If it beceomes relevant later, can include options for "spread" which keeps the same number of rows and spreads messages at the same timestamp into multiple columns or "shift" which could just shift multiple messages "down" to the few milleseconds after the timestamp of coincident messages. Though as of 10/29/20 I don"t see any reason why we"d need to code around simple "blocked structure".
    qa:
      gaze:
        na:
          check: ["raw", "downsample"]
          perc: 30
          cols: ["xp", "yp"]
      pupil:
        na:
          check: ["downsample"]
          perc: 30
          cols: ["ps_bc"]

blocks:
  GtW:
    # onset: #block-level onset
    #   parport_code: 84
    #   eye_msg: [BLOCK_BEGIN]
    # offset: #block-level offset
    #   parport_code: 92
    #   eye_msg: [BLOCK_END]

    ntrials: 40
    behav: *behav
    events: #these must unfold in the order below
      face:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1.+neighbor', 'V IAREA RECTANGLE 1.+socint'] #these messages must be received in order
      feedback:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1'] #these messages must be received in order

  GtA:
    # onset: #block-level onset
    #   parport_code: 85
    #   eye_msg: [BLOCK_BEGIN]
    # offset: #block-level offset
    #   parport_code: 91
    #   eye_msg: [BLOCK_END]

    ntrials: 40
    events: #these must unfold in the order below
      face:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1.+neighbor', 'V IAREA RECTANGLE 1.+socint'] #these messages must be received in order
      feedback:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1'] #these messages must be received in order

  NGtW:
    # onset: #block-level onset
    #   parport_code: 84
    #   eye_msg: [BLOCK_BEGIN]
    # offset: #block-level offset
    #   parport_code: 92
    #   eye_msg: [BLOCK_END]

    ntrials: 40
    behav: *behav
    events: #these must unfold in the order below
      face:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1.+neighbor', 'V IAREA RECTANGLE 1.+socint'] #these messages must be received in order
      feedback:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1'] #these messages must be received in order

  NGtA:
    # onset: #block-level onset
    #   parport_code: 84
    #   eye_msg: [BLOCK_BEGIN]
    # offset: #block-level offset
    #   parport_code: 92
    #   eye_msg: [BLOCK_END]

    ntrials: 40
    behav: *behav
    events: #these must unfold in the order below
      face:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1.+neighbor', 'V IAREA RECTANGLE 1.+socint'] #these messages must be received in order
      feedback:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1'] #these messages must be received in order

  socint_score:
    # onset: #block-level onset
    #   parport_code: 84
    #   eye_msg: [BLOCK_BEGIN]
    # offset: #block-level offset
    #   parport_code: 92
    #   eye_msg: [BLOCK_END]

    ntrials: 4
    behav: *behav
    events: #these must unfold in the order below
      socint_score:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1'] #these messages must be received in order
      feedback:
        # parport_code: 86
        eye:
          mid_msg: ['V IAREA RECTANGLE 1'] #these messages must be received in order


